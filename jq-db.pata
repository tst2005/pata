#! ./bin/pata.sh

InLoad mods/jq

data1() {
	printf '[
	{"file":"foo", "content":"line1"},
	{"file":"bar", "content":"line1"},
	{"file":"foo", "content":"line2"},
	{"file":"buz", "content":"line1"}
	]';
}
data2() {
	printf '[
        ["foo", "line1"],
        ["bar", "line1"],
        ["foo", "line2"],
        ["buz", "line1"]
	]';
} 

#data1 | {
#	result="$(JQ_OPTIONS="${JQ_OPTIONS:+$JQ_OPTIONS }-c" jqf 'keygroup_by("file")')"
#	[ "$result" = '{"bar":[{"content":"line1"}],"buz":[{"content":"line1"}],"foo":[{"content":"line1"},{"content":"line2"}]}' ] && echo ok || echo FAIL
#}


getrawdata() {
        printf '[
                { "id": "bar", "info": "A babab" },
                { "id": "buz", "info": "B ububu" },
                { "id": "foo", "info": "A fofof" }
        ]';
}
rawdata_to_db() {
#	jq_function_into_key='def into_key($keyname): ({"key": $keyname, "value": .});'
#	jq ''"$jq_function_into_key"' into_key("db")';
	jq '{db: .}';
}

#keepresult() {
#	jq '(.result|map({key:., value:true})|from_entries) as $want | .db |= map(select($want[.id]))|del(.result)'
#}

keepresult() {
	jq_function_db_keepresult='def db_keepresult($resultfield;$dbfield;$idfield):
		(.[$resultfield]|map({key:., value:true})|from_entries) as $want | .[dbfield] |= map(select($want[.[$idfield]]))|del(.[resultfield]);'
	jq ''"$jq_function_db_keepresult"' db_keepresult("result";"db";"id")';
}

keepresult() {
	jqf 'db_keepresult("result";"db";"id")';
}

search() {
        local arg="$1"
        jq '
                def grep($arg): test($arg);
                def myfilter: '"$arg"';
                .+{ result: [.db[]|select( myfilter ).id] }
        '
}

getdb() {
        getrawdata | rawdata_to_db
}
dbquery() {
        search "$1" | keepresult
}

With() {
	local key="$1";shift
	local cmd="$1";shift
	local value="$1";shift
	case "$cmd" in
		('grep') echo '.'"$key"'|test("'"$value"'")' ;;
		('!grep') echo '.'"$key"'|test("'"$value"'")|not' ;;
		('=')    echo '.'"$key"'=="'"$value"'"' ;;
		('!=')   echo '.'"$key"'!="'"$value"'"' ;;
		(*) echo >&2 ERROR:WTF ;;
	esac
}
Without() {
	local key="$1";shift
	local cmd="!$1";shift
	cmd="${cmd#!!}"
	With "$key" "$cmd" "$@"
}

#With info grep "^A"
#With id != "zz"
#Without info grep "^Z"

#ArgsJoin() {
#	local b="$1";shift
#	local e="$1";shift
#	local sep="$1";shift
#
#	[ $# -eq 0 ] || printf '%s' "$b"
#	while [ $# -gt 0 ]; do
#		if [ $# -eq 1 ]; then
#			printf '%s' "$1" "$e"
#		else
#			printf '%s%s' "$1" "$sep"
#		fi
#		shift
#	done
#}
#And() { ArgsJoin '(' ')' ') and (' "$@"; }
#Or() { ArgsJoin '(' ')' ') or (' "$@"; }

And() { jq_and "$@"; }
Or() { jq_or "$@"; }

sample1() {
        getdb |
        dbquery '.info|grep("^A")' |
        dbquery '.info|grep("^Z")|not' |
        dbquery '.id!="zz"'
}
sample2() {
	
	getdb | dbquery "$(And \
		"$(With    info grep "^A")" \
		"$(Without info grep "^Z")" \
		"$(With    id   !=   "zz")"
	)"
}

runtests() {
	[ "$(JQ_OPTIONS='-c' sample1)" = '{"db":[{"id":"bar","info":"A babab"},{"id":"foo","info":"A fofof"}]}' ] && echo ok || echo FAIL
	[ "$(JQ_OPTIONS='-c' sample2)" = '{"db":[{"id":"bar","info":"A babab"},{"id":"foo","info":"A fofof"}]}' ] && echo ok || echo FAIL
}

runtests

{
	data1
	data2
} | jq -s '{"db1": .[0], "db2": .[1], "other": .[2:]}'
